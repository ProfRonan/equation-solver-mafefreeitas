============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Equation Solver-04-24-2023-03-36-22/mafefreeitas
collected 20 items

test_grau_1.py FFFFFFF                                                   [ 35%]
test_grau_2.py FFFFFFFF                                                  [ 75%]
test_grau_invalido.py FFFFF                                              [100%]

=================================== FAILURES ===================================
________________ test_grau_1_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae8c2080>
test_input = []
expected_output = ['A equação é do primeiro grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "0"], ["A equação é do primeiro grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_1_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: str):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\nvalor de a inválido.'
E            +  where 'a equaçao é do primeiro grau\nvalor de a inválido.' = <built-in method strip of str object at 0x7f41aea23eb0>()
E            +    where <built-in method strip of str object at 0x7f41aea23eb0> = 'a equaçao é do primeiro grau\nvalor de a inválido.\n'.strip
E            +      where 'a equaçao é do primeiro grau\nvalor de a inválido.\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8ea560>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8ea560> = <_io.StringIO object at 0x7f41ae8ea560>.getvalue

test_grau_1.py:29: AssertionError
__________________ test_grau_1[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae912560>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\no valor da raiz é: -0.00'
E            +  where 'a equaçao é do primeiro grau\no valor da raiz é: -0.00' = <built-in method strip of str object at 0x7f41ae90b3b0>()
E            +    where <built-in method strip of str object at 0x7f41ae90b3b0> = 'a equaçao é do primeiro grau\no valor da raiz é: -0.00\n'.strip
E            +      where 'a equaçao é do primeiro grau\no valor da raiz é: -0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb250>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb250> = <_io.StringIO object at 0x7f41ae8eb250>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae8c32e0>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\no valor da raiz é: -0.00'
E            +  where 'a equaçao é do primeiro grau\no valor da raiz é: -0.00' = <built-in method strip of str object at 0x7f41ae90b5b0>()
E            +    where <built-in method strip of str object at 0x7f41ae90b5b0> = 'a equaçao é do primeiro grau\no valor da raiz é: -0.00\n'.strip
E            +      where 'a equaçao é do primeiro grau\no valor da raiz é: -0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb370>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb370> = <_io.StringIO object at 0x7f41ae8eb370>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae8c3070>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\no valor da raiz é: -0.00'
E            +  where 'a equaçao é do primeiro grau\no valor da raiz é: -0.00' = <built-in method strip of str object at 0x7f41aea23db0>()
E            +    where <built-in method strip of str object at 0x7f41aea23db0> = 'a equaçao é do primeiro grau\no valor da raiz é: -0.00\n'.strip
E            +      where 'a equaçao é do primeiro grau\no valor da raiz é: -0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb490>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb490> = <_io.StringIO object at 0x7f41ae8eb490>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae8c3bb0>
test_input = [], expected_output = ['A equação é do primeiro grau', '5.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\no valor da raiz é: 5.00'
E            +  where 'a equaçao é do primeiro grau\no valor da raiz é: 5.00' = <built-in method strip of str object at 0x7f41ae90b3b0>()
E            +    where <built-in method strip of str object at 0x7f41ae90b3b0> = 'a equaçao é do primeiro grau\no valor da raiz é: 5.00\n'.strip
E            +      where 'a equaçao é do primeiro grau\no valor da raiz é: 5.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb910>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb910> = <_io.StringIO object at 0x7f41ae8eb910>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae911450>
test_input = [], expected_output = ['A equação é do primeiro grau', '-2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\no valor da raiz é: -2.00'
E            +  where 'a equaçao é do primeiro grau\no valor da raiz é: -2.00' = <built-in method strip of str object at 0x7f41ae90b8b0>()
E            +    where <built-in method strip of str object at 0x7f41ae90b8b0> = 'a equaçao é do primeiro grau\no valor da raiz é: -2.00\n'.strip
E            +      where 'a equaçao é do primeiro grau\no valor da raiz é: -2.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb2e0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb2e0> = <_io.StringIO object at 0x7f41ae8eb2e0>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41aea54610>
test_input = [], expected_output = ['A equação é do primeiro grau', '2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'a equaçao é do primeiro grau\no valor da raiz é: 2.00'
E            +  where 'a equaçao é do primeiro grau\no valor da raiz é: 2.00' = <built-in method strip of str object at 0x7f41ae90bab0>()
E            +    where <built-in method strip of str object at 0x7f41ae90bab0> = 'a equaçao é do primeiro grau\no valor da raiz é: 2.00\n'.strip
E            +      where 'a equaçao é do primeiro grau\no valor da raiz é: 2.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb250>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae8eb250> = <_io.StringIO object at 0x7f41ae8eb250>.getvalue

test_grau_1.py:56: AssertionError
________________ test_grau_2_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae912a10>
test_input = []
expected_output = ['A equação é do segundo grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "0"], ["A equação é do segundo grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_2_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    g=int(input("digite o grau da equaçao:"))
    if g <1 or g >2:
        print("grau invalido")
    else:
        if g==1:
            print("a equaçao é do primeiro grau")
            a= float(input("digite o valo de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valo de b:"))
                x=-b/a
                print("o valor da raiz é: {:.2f}".format(x))
        else:
            print("a equaçao é do segundo grau.")
            a=float(input("digite o valor de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valor de b:"))
                c=float(input("digite o valor de c:"))
                delta=b**2-4*a*c
>           if delta < 0:
E           NameError: name 'delta' is not defined

main.py:23: NameError
__________________ test_grau_2[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41aea54bb0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00'
E            +  where 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00' = <built-in method strip of str object at 0x7f41ae940540>()
E            +    where <built-in method strip of str object at 0x7f41ae940540> = 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00\n'.strip
E            +      where 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae9405e0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae9405e0> = <_io.StringIO object at 0x7f41ae9405e0>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae960670>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação'
E            +  where 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação' = <built-in method strip of str object at 0x7f41ae940660>()
E            +    where <built-in method strip of str object at 0x7f41ae940660> = 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação\n'.strip
E            +      where 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae940e50>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae940e50> = <_io.StringIO object at 0x7f41ae940e50>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae9605b0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-1.00', '1.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    g=int(input("digite o grau da equaçao:"))
    if g <1 or g >2:
        print("grau invalido")
    else:
        if g==1:
            print("a equaçao é do primeiro grau")
            a= float(input("digite o valo de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valo de b:"))
                x=-b/a
                print("o valor da raiz é: {:.2f}".format(x))
        else:
            print("a equaçao é do segundo grau.")
            a=float(input("digite o valor de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valor de b:"))
                c=float(input("digite o valor de c:"))
                delta=b**2-4*a*c
            if delta < 0:
                print("nao exitem raixes reais para a equação")
            elif delta==0:
                x= -b/2*a
                print("a equaçao so tem uma raiz real: {:.2f}".format(x))
            else:
>               x1 = (-b + math.sqrt(delta))/(2*a)
E               NameError: name 'math' is not defined

main.py:29: NameError
__________________ test_grau_2[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae9678b0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-1.00', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    g=int(input("digite o grau da equaçao:"))
    if g <1 or g >2:
        print("grau invalido")
    else:
        if g==1:
            print("a equaçao é do primeiro grau")
            a= float(input("digite o valo de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valo de b:"))
                x=-b/a
                print("o valor da raiz é: {:.2f}".format(x))
        else:
            print("a equaçao é do segundo grau.")
            a=float(input("digite o valor de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valor de b:"))
                c=float(input("digite o valor de c:"))
                delta=b**2-4*a*c
            if delta < 0:
                print("nao exitem raixes reais para a equação")
            elif delta==0:
                x= -b/2*a
                print("a equaçao so tem uma raiz real: {:.2f}".format(x))
            else:
>               x1 = (-b + math.sqrt(delta))/(2*a)
E               NameError: name 'math' is not defined

main.py:29: NameError
__________________ test_grau_2[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41aea547f0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação'
E            +  where 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação' = <built-in method strip of str object at 0x7f41ae941bc0>()
E            +    where <built-in method strip of str object at 0x7f41ae941bc0> = 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação\n'.strip
E            +      where 'a equaçao é do segundo grau.\nnao exitem raixes reais para a equação\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae940ca0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae940ca0> = <_io.StringIO object at 0x7f41ae940ca0>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae95dd50>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-2.00', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    g=int(input("digite o grau da equaçao:"))
    if g <1 or g >2:
        print("grau invalido")
    else:
        if g==1:
            print("a equaçao é do primeiro grau")
            a= float(input("digite o valo de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valo de b:"))
                x=-b/a
                print("o valor da raiz é: {:.2f}".format(x))
        else:
            print("a equaçao é do segundo grau.")
            a=float(input("digite o valor de a:"))
            if a==0:
                print("valor de a inválido.")
            else:
                b=float(input("digite o valor de b:"))
                c=float(input("digite o valor de c:"))
                delta=b**2-4*a*c
            if delta < 0:
                print("nao exitem raixes reais para a equação")
            elif delta==0:
                x= -b/2*a
                print("a equaçao so tem uma raiz real: {:.2f}".format(x))
            else:
>               x1 = (-b + math.sqrt(delta))/(2*a)
E               NameError: name 'math' is not defined

main.py:29: NameError
__________________ test_grau_2[test_input6-expected_output6] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae8c2ef0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00'
E            +  where 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00' = <built-in method strip of str object at 0x7f41ae9425e0>()
E            +    where <built-in method strip of str object at 0x7f41ae9425e0> = 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00\n'.strip
E            +      where 'a equaçao é do segundo grau.\na equaçao so tem uma raiz real: -0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae942560>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae942560> = <_io.StringIO object at 0x7f41ae942560>.getvalue

test_grau_2.py:64: AssertionError
___________________ test_grau_invalido[-1-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae94ffd0>
test_input = '-1', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'grau invalido'
E        +  where 'grau invalido' = <built-in method strip of str object at 0x7f41aea4fc30>()
E        +    where <built-in method strip of str object at 0x7f41aea4fc30> = 'grau invalido\n'.strip
E        +      where 'grau invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae942d40>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae942d40> = <_io.StringIO object at 0x7f41ae942d40>.getvalue

test_grau_invalido.py:31: AssertionError
___________________ test_grau_invalido[-3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae8c3280>
test_input = '-3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'grau invalido'
E        +  where 'grau invalido' = <built-in method strip of str object at 0x7f41ae93a9b0>()
E        +    where <built-in method strip of str object at 0x7f41ae93a9b0> = 'grau invalido\n'.strip
E        +      where 'grau invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae942e60>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae942e60> = <_io.StringIO object at 0x7f41ae942e60>.getvalue

test_grau_invalido.py:31: AssertionError
____________________ test_grau_invalido[0-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae94f220>
test_input = '0', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'grau invalido'
E        +  where 'grau invalido' = <built-in method strip of str object at 0x7f41aea5dbf0>()
E        +    where <built-in method strip of str object at 0x7f41aea5dbf0> = 'grau invalido\n'.strip
E        +      where 'grau invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae942dd0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae942dd0> = <_io.StringIO object at 0x7f41ae942dd0>.getvalue

test_grau_invalido.py:31: AssertionError
____________________ test_grau_invalido[3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae94d5d0>
test_input = '3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'grau invalido'
E        +  where 'grau invalido' = <built-in method strip of str object at 0x7f41ae9865b0>()
E        +    where <built-in method strip of str object at 0x7f41ae9865b0> = 'grau invalido\n'.strip
E        +      where 'grau invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae942ef0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae942ef0> = <_io.StringIO object at 0x7f41ae942ef0>.getvalue

test_grau_invalido.py:31: AssertionError
___________________ test_grau_invalido[10-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41ae94fd30>
test_input = '10', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'grau invalido'
E        +  where 'grau invalido' = <built-in method strip of str object at 0x7f41ae9871f0>()
E        +    where <built-in method strip of str object at 0x7f41ae9871f0> = 'grau invalido\n'.strip
E        +      where 'grau invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41ae943370>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41ae943370> = <_io.StringIO object at 0x7f41ae943370>.getvalue

test_grau_invalido.py:31: AssertionError
=========================== short test summary info ============================
FAILED test_grau_1.py::test_grau_1_a_0[test_input0-expected_output0] - Assert...
FAILED test_grau_1.py::test_grau_1[test_input0-expected_output0] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input1-expected_output1] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input2-expected_output2] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input3-expected_output3] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input4-expected_output4] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input5-expected_output5] - AssertionE...
FAILED test_grau_2.py::test_grau_2_a_0[test_input0-expected_output0] - NameEr...
FAILED test_grau_2.py::test_grau_2[test_input0-expected_output0] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input1-expected_output1] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input2-expected_output2] - NameError:...
FAILED test_grau_2.py::test_grau_2[test_input3-expected_output3] - NameError:...
FAILED test_grau_2.py::test_grau_2[test_input4-expected_output4] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input5-expected_output5] - NameError:...
FAILED test_grau_2.py::test_grau_2[test_input6-expected_output6] - AssertionE...
FAILED test_grau_invalido.py::test_grau_invalido[-1-Grau inv\xe1lido] - Asser...
FAILED test_grau_invalido.py::test_grau_invalido[-3-Grau inv\xe1lido] - Asser...
FAILED test_grau_invalido.py::test_grau_invalido[0-Grau inv\xe1lido] - Assert...
FAILED test_grau_invalido.py::test_grau_invalido[3-Grau inv\xe1lido] - Assert...
FAILED test_grau_invalido.py::test_grau_invalido[10-Grau inv\xe1lido] - Asser...
============================== 20 failed in 0.36s ==============================
